package com.cloy.ottavino;

import javax.sound.midi.MidiChannel;
import javax.sound.midi.Synthesizer;

public enum MidiInstrument implements Instrument {
	
	GrandPiano(0),
	BrightPiano(1),
	ElectricGrand(2),
	HonkyTonkPiano(3),
	EPiano1(4),
	EPiano2(5),
	Harpsichord(6),
	Clavinet(7),
	Celesta(8),
	Glockenspiel(9),
	MusicBox(10),
	Vibraphone(11),
	Marimba(12),
	Xylophone(13),
	TubularBell(14),
	Dulcimer(15),
	Organ1(16),
	Organ2(17),
	Organ3(18),
	ChurchOrgan(19),
	ReedOrgan(20),
	Accordian(21),
	Harmonica(22),
	Bandoneon(23),
	NylonStrGtr(24),
	SteelStrGtr(25),
	JazzGtr(26),
	CleanGtr(27),
	MutedGtr(28),
	OverdriveGtr(29),
	DistortionGtr(30),
	GtrHarmonics(31),
	AcousticBass(32),
	FingeredBass(33),
	PickedBass(34),
	Fretless(35),
	SlapBass1(36),
	SlapBass2(37),
	SynBass1(38),
	SynBass2(39),
	Violin(40),
	Viola(41),
	Cello(42),
	Contrabass(43),
	Tremolo(44),
	Pizzicato(45),
	Harp(46),
	Timpani(47),
	StringEnsemble(48),
	SlowStrings(49),
	SynthStrings1(50),
	SynthStrings2(51),
	Choir(52),
	Voice(53),
	SynVox(54),
	OrchestraHit(55),
	Trumpet(56),
	Trombone(57),
	Tuba(58),
	MutedTrumpet(59),
	FrenchHorn(60),
	BrassEnsemble(61),
	SynthBrass1(62),
	SynthBrass2(63),
	SopranoSax(64),
	AltoSax(65),
	TenorSax(66),
	BaritoneSax(67),
	Oboe(68),
	EnglishHorn(69),
	Bassoon(70),
	Clarinet(71),
	Piccolo(72),
	Flute(73),
	Recorder(74),
	PanPipes(75),
	BottleBlow(76),
	Shakuhachi(77),
	Whistle(78),
	Ocarina(79),
	SquareWave(80),
	SawtoothWave(81),
	SynCalliope(82),
	ChifferLead(83),
	Charang(84),
	SoloVox(85),
	FifthsSawWave(86),
	BassAndLead(87),
	Fantasia(88),
	WarmPad(89),
	PolySynth(90),
	SpaceVox(91),
	BowedGlass(92),
	MetalPad(93),
	HaloPad(94),
	SweepPad(95),
	IceRain(96),
	Soundtrack(97),
	Crystal(98),
	Atmosphere(99),
	Brightness(100),
	Goblin(101),
	EchoDrops(102),
	StarTheme(103),
	Sitar(104),
	Banjo(105),
	Shamisen(106),
	Koto(107),
	Kalimba(108),
	Bagpipes(109),
	Fiddle(110),
	Shanai(111),
	TinkerBell(112),
	Agogo(113),
	SteelDrum(114),
	Woodblock(115),
	Taiko(116),
	MelodicToms(117),
	SynDrums(118),
	ReverseCymbal(119),
	FretNoise(120),
	BreathNoise(121),
	Seashore(122),
	Birdsong(123),
	Telephone(124),
	Helicopter(125),
	Applause(126),
	Gunshot(127),
	highQ(128),
	slap(129),
	scratchpush(130),
	scratchpull(131),
	sticks(132),
	squareclick(133),
	metronomeclick(134),
	metronomebell(135),
	kick2(136),
	kick1(137),
	sidestick(138),
	snare1(139),
	handclap(140),
	snare2(141),
	lotom2(142),
	closehihat(143),
	lotom1(144),
	pedalhihat(145),
	midtom2(146),
	openhihat(147),
	midtom1(148),
	hitom2(149),
	crashcymbal1(150),
	hitom1(151),
	ridecymbal1(152),
	chinesecymbal(153),
	ridebell(154),
	tambourine(155),
	splashcymbal(156),
	cowbell(157),
	crashcymbal2(158),
	vibraslap(159),
	ridecymbal2(160),
	hibongo(161),
	lobongo(162),
	congaslap(163),
	hiconga(164),
	loconga(165),
	hitimbale(166),
	lotimbale(167),
	hiagogo(168),
	loagogo(169),
	cabasa(170),
	maracas(171),
	hiwhistle(172),
	lowhistle(173),
	shortguiro(174),
	longguiro(175),
	claves(176),
	hiwoodblock(177),
	lowoodblock(178),
	hiquica(179),
	loquica(180),
	mutetriangle(181),
	opentriangle(182),
	shaker(183),
	jinglebells(184),
	belltree(185),
	castanets(186),
	mutesurdo(187),
	opensurdo(188);
	
	private final int position;
	
	private MidiInstrument(int position) {
		this.position = position;
	}
	
	public static MidiInstrument getInstrument(int pos) {
		for(MidiInstrument i : values())
			if(i.position == pos)
				return i;
		throw new RuntimeException("Couldn't find instrument at position " + pos);
	}
	
	public MidiChannel getMidiChannel(Synthesizer synth) {
		return synth.getChannels()[position];
	}
}
